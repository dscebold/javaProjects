import java.awt.*;
import java.awt.font.*;
import java.awt.geom.*;
import java.awt.image.BufferedImage;
import java.text.*;
import java.util.*;
import java.util.List; // resolves problem with java.awt.List and java.util.List
import java.util.Random;

/**
 * A class that represents a picture. This class inherits from SimplePicture and
 * allows the student to add functionality to the Picture class.
 * 
 * @author Barbara Ericson ericson@cc.gatech.edu
 */
public class Picture extends SimplePicture {
	///////////////////// constructors //////////////////////////////////

	private Random rand = new Random();

	/**
	 * Constructor that takes no arguments
	 */
	public Picture() {
		/*
		 * not needed but use it to show students the implicit call to super() child
		 * constructors always call a parent constructor
		 */
		super();

		rand = new Random();
	}

	/**
	 * Constructor that takes a file name and creates the picture
	 * 
	 * @param fileName the name of the file to create the picture from
	 */
	public Picture(String fileName) {
		// let the parent class handle this fileName
		super(fileName);
	}

	/**
	 * Constructor that takes the width and height
	 * 
	 * @param height the height of the desired picture
	 * @param width  the width of the desired picture
	 */
	public Picture(int height, int width) {
		// let the parent class handle this width and height
		super(width, height);
	}

	/**
	 * Constructor that takes a picture and creates a copy of that picture
	 * 
	 * @param copyPicture the picture to copy
	 */
	public Picture(Picture copyPicture) {
		// let the parent class do the copy
		super(copyPicture);
	}

	/**
	 * Constructor that takes a buffered image
	 * 
	 * @param image the buffered image to use
	 */
	public Picture(BufferedImage image) {
		super(image);
	}

	////////////////////// methods ///////////////////////////////////////

	/**
	 * Method to return a string with information about this picture.
	 * 
	 * @return a string with information about the picture such as fileName, height
	 *         and width.
	 */
	public String toString() {
		String output = "Picture, filename " + getFileName() + " height " + getHeight() + " width " + getWidth();
		return output;

	}

	/** Method to set the blue to 0 */
	public void zeroBlue() {
		Pixel[][] pixels = this.getPixels2D();
		for (Pixel[] rowArray : pixels) {
			for (Pixel pixelObj : rowArray) {
				pixelObj.setBlue(0);
			}
		}
	}

	/**
	 * Method that mirrors the picture around a vertical mirror in the center of the
	 * picture from left to right
	 */
	public void mirrorVertical() {
		Pixel[][] pixels = this.getPixels2D();
		Pixel leftPixel = null;
		Pixel rightPixel = null;
		int width = pixels[0].length;
		for (int row = 0; row < pixels.length; row++) {
			for (int col = 0; col < width / 2; col++) {
				leftPixel = pixels[row][col];
				rightPixel = pixels[row][width - 1 - col];
				rightPixel.setColor(leftPixel.getColor());
			}
		}
	}

	public void mirrorVerticalRightToLeft() {
		Pixel[][] pixels = this.getPixels2D();
		Pixel leftPixel = null;
		Pixel rightPixel = null;
		int width = pixels[0].length;
		for (int row = 0; row < pixels.length; row++) {
			for (int col = 0; col < width / 2; col++) {
				leftPixel = pixels[row][col];
				rightPixel = pixels[row][width - 1 - col];
				leftPixel.setColor(rightPixel.getColor());
			}
		}
	}

	public void mirrorHorizontal() {
		Pixel[][] pixels = this.getPixels2D();
		Pixel topPixel = null;
		Pixel bottomPixel = null;
		int length = pixels.length;
		for (int row = 0; row < length / 2; row++) {
			for (int col = 0; col < pixels[row].length; col++) {
				topPixel = pixels[row][col];
				bottomPixel = pixels[length - 1 - row][col];
				bottomPixel.setColor(topPixel.getColor());
			}
		}
	}

	public void mirrorHorizontalBotToTop() {
		Pixel[][] pixels = this.getPixels2D();
		Pixel topPixel = null;
		Pixel bottomPixel = null;
		int length = pixels.length;
		for (int row = 0; row < length / 2; row++) {
			for (int col = 0; col < pixels[row].length; col++) {
				topPixel = pixels[row][col];
				bottomPixel = pixels[length - 1 - row][col];
				topPixel.setColor(bottomPixel.getColor());
			}
		}
	}

	public void mirrorDiagonal() {
		Pixel[][] pixels = this.getPixels2D();
		Pixel topPixel = null;
		Pixel bottomPixel = null;
		for (int row = 0; row < pixels.length && row < pixels[0].length; row++) {
			for (int col = 0; col < pixels[0].length && col < pixels.length; col++) {
				topPixel = pixels[row][col];
				bottomPixel = pixels[col][row];
				topPixel.setColor(bottomPixel.getColor());
			}
		}
	}

	/** Mirror just part of a picture of a temple */
	public void mirrorTemple() {
		int mirrorPoint = 276;
		Pixel leftPixel = null;
		Pixel rightPixel = null;
		int count = 0;
		Pixel[][] pixels = this.getPixels2D();

		// loop through the rows
		for (int row = 27; row < 97; row++) {
			// loop from 13 to just before the mirror point
			count++;
			for (int col = 13; col < mirrorPoint; col++) {
				count++;
				leftPixel = pixels[row][col];
				rightPixel = pixels[row][mirrorPoint - col + mirrorPoint];
				rightPixel.setColor(leftPixel.getColor());
			}
		}
		System.out.println(count);
	}

	public void mirrorArms() {
		Pixel[][] pixels = this.getPixels2D();
		Pixel topPixel = null;
		Pixel bottomPixel = null;
		for (int row = 159; row < 191; row++) {
			for (int col = 105; col < 170; col++) {
				topPixel = pixels[row][col];
				bottomPixel = pixels[191 - row + 191][col];
				bottomPixel.setColor(topPixel.getColor());
			}
		}
		for (int row = 172; row < 196; row++) {
			for (int col = 239; col < 294; col++) {
				topPixel = pixels[row][col];
				bottomPixel = pixels[196 - row + 196][col];
				bottomPixel.setColor(topPixel.getColor());
			}
		}
	}

	public void mirrorGull() {
		Pixel[][] pixels = this.getPixels2D();
		Pixel topPixel = null;
		Pixel bottomPixel = null;
		int mirrorPoint = 357;
		for (int row = 234; row < 325; row++) {
			for (int col = 238; col < 344; col++) {
				topPixel = pixels[row][col];
				bottomPixel = pixels[row][mirrorPoint - col + mirrorPoint];
				bottomPixel.setColor(topPixel.getColor());
			}
		}
	}

	/**
	 * copy from the passed fromPic to the specified startRow and startCol in the
	 * current picture
	 * 
	 * @param fromPic  the picture to copy from
	 * @param startRow the start row to copy to
	 * @param startCol the start col to copy to
	 */
	public void copy(Picture fromPic, int startRow, int startCol) {
		Pixel fromPixel = null;
		Pixel toPixel = null;
		Pixel[][] toPixels = this.getPixels2D();
		Pixel[][] fromPixels = fromPic.getPixels2D();
		for (int fromRow = 0, toRow = startRow; fromRow < fromPixels.length
				&& toRow < toPixels.length; fromRow++, toRow++) {
			for (int fromCol = 0, toCol = startCol; fromCol < fromPixels[0].length
					&& toCol < toPixels[0].length; fromCol++, toCol++) {
				fromPixel = fromPixels[fromRow][fromCol];
				toPixel = toPixels[toRow][toCol];
				toPixel.setColor(fromPixel.getColor());
			}
		}
	}

	public void partialcopy(Picture fromPic, int startRow, int startCol, int endRow, int endCol) {
		Pixel fromPixel = null;
		Pixel toPixel = null;
		Pixel[][] toPixels = this.getPixels2D();
		Pixel[][] fromPixels = fromPic.getPixels2D();
		for (int fromRow = 0, toRow = startRow; fromRow < endRow && toRow < toPixels.length; fromRow++, toRow++) {
			for (int fromCol = 0, toCol = startCol; fromCol < endCol
					&& toCol < toPixels[0].length; fromCol++, toCol++) {
				fromPixel = fromPixels[fromRow][fromCol];
				toPixel = toPixels[toRow][toCol];
				toPixel.setColor(fromPixel.getColor());
			}
		}
	}

	/** Method to create a collage of several pictures */
	public void createCollage() {
		Picture flower1 = new Picture("flower1.jpg");
		Picture flower2 = new Picture("flower2.jpg");
		this.copy(flower1, 0, 0);
		this.copy(flower2, 100, 0);
		this.copy(flower1, 200, 0);
		Picture flowerNoBlue = new Picture(flower2);
		flowerNoBlue.zeroBlue();
		this.copy(flowerNoBlue, 300, 0);
		this.copy(flower1, 400, 0);
		this.copy(flower2, 500, 0);
		this.mirrorVertical();
		this.write("collage.jpg");
	}

	public void myCollage() {
		Picture robot1 = new Picture("robot.jpg");
		Picture robot2 = new Picture("robot.jpg");
		this.copy(robot1, 0, 0);
		this.copy(robot2, 100, 0);
		this.copy(robot1, 200, 0);
		Picture flowerNoBlue = new Picture(robot2);
		flowerNoBlue.zeroBlue();
		this.copy(flowerNoBlue, 300, 0);
		this.copy(robot1, 400, 0);
		this.copy(robot2, 500, 0);
		this.mirrorVertical();
		this.write("collage.jpg");
	}

	/**
	 * Method to show large changes in color
	 * 
	 * @param edgeDist the distance for finding edges
	 */
	public void edgeDetection(int edgeDist) {
		Pixel leftPixel = null;
		Pixel rightPixel = null;
		Pixel[][] pixels = this.getPixels2D();
		Color rightColor = null;
		for (int row = 0; row < pixels.length; row++) {
			for (int col = 0; col < pixels[0].length - 1; col++) {
				leftPixel = pixels[row][col];
				rightPixel = pixels[row][col + 1];
				rightColor = rightPixel.getColor();
				if (leftPixel.colorDistance(rightColor) > edgeDist)
					leftPixel.setColor(Color.BLACK);
				else
					leftPixel.setColor(Color.WHITE);
			}
		}
	}

	public void keepOnlyBlue() {
		Pixel[][] pixels = this.getPixels2D();
		for (Pixel[] rowArray : pixels) {
			for (Pixel pixelObj : rowArray) {
				pixelObj.setRed(0);
				pixelObj.setGreen(0);
			}
		}
	}

	public void keepOnlyRed() {
		Pixel[][] pixels = this.getPixels2D();
		for (Pixel[] rowArray : pixels) {
			for (Pixel pixelObj : rowArray) {
				pixelObj.setBlue(0);
				pixelObj.setGreen(0);
			}
		}
	}

	public void keepOnlyGreen() {
		Pixel[][] pixels = this.getPixels2D();
		for (Pixel[] rowArray : pixels) {
			for (Pixel pixelObj : rowArray) {
				pixelObj.setRed(0);
				pixelObj.setBlue(0);
			}
		}
	}

	public void negate() {
		Pixel[][] pixels = this.getPixels2D();
		for (Pixel[] rowArray : pixels) {
			for (Pixel pixelObj : rowArray) {
				pixelObj.setRed(255 - pixelObj.getRed());
				pixelObj.setBlue(255 - pixelObj.getBlue());
				pixelObj.setGreen(255 - pixelObj.getGreen());
			}
		}
	}

	public void Grayscale() {
		int ave = 0;
		Pixel[][] pixels = this.getPixels2D();
		for (Pixel[] rowArray : pixels) {
			for (Pixel pixelObj : rowArray) {
				ave = 0;
				ave += pixelObj.getRed() + pixelObj.getBlue() + pixelObj.getGreen();
				ave = (ave / 3);
				pixelObj.setRed(ave);
				pixelObj.setBlue(ave);
				pixelObj.setGreen(ave);
			}
		}
	}

	public void clearLow() {
		Pixel leftPixel = null;
		Pixel rightPixel = null;
		Pixel[][] pixels = this.getPixels2D();
		Color rightColor = null;
		for (int row = 0; row < pixels.length; row++) {
			for (int col = 0; col < pixels[0].length - 1; col++) {
				if (pixels[row][col].getRed() > 25 || pixels[row][col].getGreen() < 150) {
					pixels[row][col].setColor(Color.WHITE);
				}
			}
		}
	}

	public void darker(Picture pic) {
		Pixel fromPixel = null;
		Pixel toPixel = null;
		Pixel[][] pixels = this.getPixels2D();
		Pixel[][] pixels2 = pic.getPixels2D();
		Color rightColor = null;
		for (int row = 0; row < pixels.length; row++) {
			for (int col = 0; col < pixels[0].length - 1; col++) {
				if (!(pixels2[row][col].getColor().equals(Color.WHITE))) {
					pixels[row][col].setColor(pixels[row][col].getColor().darker());
				}
			}
		}
	}

	/*
	 * Main method for testing - each class in Java can have a main method
	 */
	public static void main(String[] args) {
		Picture beach = new Picture("beach.jpg");
		beach.explore();
		beach.zeroBlue();
		beach.explore();
	}

	public void getGreen(Picture add) {
		Pixel[][] pixels = this.getPixels2D();
		Pixel[][] put = add.getPixels2D();
		for (int row = 0; row < put.length; row++) {
			for (int col = 0; col < put[0].length - 1; col++) {
				if (put[row][col].colorDistance(new Color(105, 210, 155)) > 90) {
					pixels[row + 187][col + 338].setColor(put[row][col].getColor());
				}
			}
		}
	}

	public void getGreen1(Picture add) {
		Pixel[][] pixels = this.getPixels2D();
		Pixel[][] put = add.getPixels2D();
		for (int row = 0; row < put.length; row++) {
			for (int col = 0; col < put[0].length - 1; col++) {
				if (put[row][col].colorDistance(Color.ORANGE) > 20) {
					pixels[row + 265][col + 93].setColor(put[row][col].getColor());
				}
			}
		}
	}

	public void setPink() {
		Pixel[][] pixels = this.getPixels2D();
		for (int row = 0; row < pixels.length; row++) {
			for (int col = 0; col < pixels[0].length; col++) {
				if (pixels[row][col].colorDistance(new Color(102, 208, 110)) < 30) {
					pixels[row][col].setColor(Color.ORANGE);
				}
			}
		}
		for (int row = 0; row < pixels.length; row++) {
			for (int col = 0; col < pixels[0].length; col++) {
				if (pixels[row][col].colorDistance(new Color(76, 177, 101)) < 30) {
					pixels[row][col].setColor(Color.ORANGE);
				}
			}
		}
		for (int row = 373; row < pixels.length; row++) {
			for (int col = 0; col < pixels[0].length - 1; col++) {
				if (pixels[row][col].colorDistance(new Color(47, 120, 100)) < 45) {
					pixels[row][col].setColor(Color.ORANGE);
				}
			}
		}
		for (int row = 0; row < 277; row++) {
			for (int col = 0; col < pixels[0].length; col++) {
				if (pixels[row][col].colorDistance(new Color(149, 226, 148)) < 70) {
					pixels[row][col].setColor(Color.ORANGE);
				}
			}
		}
		for (int row = 359; row < pixels.length; row++) {
			for (int col = 0; col < 224; col++) {
				if (pixels[row][col].colorDistance(new Color(64, 153, 71)) < 55
						&& pixels[row][col].colorDistance(new Color(25, 29, 32)) > 40) {
					pixels[row][col].setColor(Color.ORANGE);
				}
			}
		}
		for (int row = 506; row < 578; row++) {
			for (int col = 187; col < 338; col++) {
				if (pixels[row][col].colorDistance(new Color(39, 98, 50)) < 40) {
					pixels[row][col].setColor(Color.ORANGE);
				}
			}
		}
//		for (int row = 0; row < pixels.length; row++) {
//			for (int col = 0; col < pixels[0].length; col++) {
//				if (pixels[row][col].colorDistance(new Color(83, 191, 71)) < 45) {
//					pixels[row][col].setColor(Color.ORANGE);
//				}
//			}
//		}
//		for (int row = 0; row < pixels.length; row++) {
//			for (int col = 0; col < pixels[0].length; col++) {
//				if (pixels[row][col].colorDistance(new Color(82, 144, 121)) < 25) {
//					pixels[row][col].setColor(Color.ORANGE);
//				}
//			}
//		}
//		for (int row = 0; row < 30; row++) {
//			for (int col = 165; col < pixels[0].length; col++) {
//				if (pixels[row][col].colorDistance(new Color(186, 239, 183)) < 70) {
//					pixels[row][col].setColor(Color.ORANGE);
//				}
//			}
//		}
//		for (int row = 146; row < 196; row++) {
//			for (int col = 46; col < 136; col++) {
//				if (pixels[row][col].colorDistance(new Color(33, 98, 42)) < 25) {
//					pixels[row][col].setColor(Color.ORANGE);
//				}
//			}
//		}

	}

	public void lightUp() {
		Pixel[][] pixels = this.getPixels2D();
		for (int row = 0; row < pixels.length; row++) {
			for (int col = 0; col < pixels[0].length - 1; col++) {
				if (pixels[row][col].colorDistance(new Color(30, 68, 47)) < 35) {
					pixels[row][col].setColor(pixels[row][col].getColor().brighter().brighter());
				}
			}
		}

	}

	public void lightsaber() {
		int dist = 8;
		Pixel[][] pixels = this.getPixels2D();
		for (int row = 0; row < pixels.length; row++) {
			for (int col = 0; col < pixels[0].length; col++) {
				if (pixels[row][col].colorDistance(new Color(232, 8, 42)) < 80) {
//				if(pixels[row][col].getColor().equals(Color.RED)) {
					Color from = (pixels[row][col].getColor());
					for (int i = col; (i >= col - dist); i--) {
						Color to = pixels[row][i].getColor();
						Color ave = new Color(((from.getRed()) + (to.getRed() * 10)) / 11,
								((from.getGreen()) + (to.getGreen() * 10)) / 11,
								((from.getBlue()) + (to.getBlue() * 10)) / 11);
//						if(rand.nextInt(Math.abs((col - i)) +1) == 0) {
						pixels[row][i].setColor(ave);
//						} 
						// Color ave = new Color(((from.getRed() * Math.abs(col - dist - i)
						// )+(to.getRed() * (col - i)))/dist, ((from.getGreen() * Math.abs(col - dist -
						// i))+(to.getGreen() * (col - i)))/dist, ((from.getBlue() * Math.abs(col - dist
						// - i))+(to.getBlue() * (col - i)))/dist);
//						Color ave = new Color((int) (from.getRed() * .15), (int) (from.getGreen() * .15),
//								(int) (from.getBlue() * .15));
//						pixels[row][i].setColor(ave);
					}
				}
			}
		}
		for (int row = 0; row < pixels.length; row++) {
			for (int col = pixels[0].length - 1; col >= 0; col--) {
				if (pixels[row][col].colorDistance(new Color(232, 8, 42)) < 100) {
//					if(pixels[row][col].getColor().equals(Color.RED)) {
					Color from = (pixels[row][col].getColor());
					for (int i = col; (i <= col + dist); i++) {
						Color to = pixels[row][i].getColor();
						Color ave = new Color(((from.getRed()) + (to.getRed() * 10)) / 11,
								((from.getGreen()) + (to.getGreen() * 10)) / 11,
								((from.getBlue()) + (to.getBlue() * 10)) / 11);
//						if(rand.nextInt(Math.abs((i-col)) + 1) == 0) {
//							pixels[row][i].setColor(ave);
//						} 
						// Color ave = new Color(((from.getRed() * (col + dist - i))+(to.getRed() *
						// (i-col)))/dist, ((from.getGreen() * (col + dist - i))+(to.getGreen()*
						// (i-col)))/dist, ((from.getBlue() * (col + dist - i))+(to.getBlue()*
						// (i-col)))/dist);
//						Color ave = new Color((int) (from.getRed() * .15), (int) (from.getGreen() * .15),
//								(int) (from.getBlue() * .15));
						pixels[row][i].setColor(ave);
					}
				}
			}
		}

	}

	public void reColor() {
		Pixel[][] pixels = this.getPixels2D();
		for (int row = 0; row < 242; row++) {
			for (int col = 83; col < 120; col++) {
				if (pixels[row][col].colorDistance(new Color(248, 0, 46)) < 110
						|| pixels[row][col].colorDistance(new Color(140, 106, 68)) < 110) {
					pixels[row][col].setColor(Color.RED);
				}
			}
		}

	}

	public void getStar(Picture death) {
		Pixel[][] pixels = this.getPixels2D();
		Pixel[][] to = death.getPixels2D();
		for (int row = 0; row < to.length; row++) {
			for (int col = 0; col < pixels[0].length; col++) {
				if (pixels[row][col].colorDistance(new Color(126, 182, 231)) < 45) {
					pixels[row][col].setColor(to[row][col].getColor());
				}
			}
		}
		for (int row = 0; row < 40; row++) {
			for (int col = 0; col < pixels[0].length; col++) {
				if (pixels[row][col].colorDistance(new Color(86, 154, 215)) < 30) {
					pixels[row][col].setColor(to[row][col].getColor());
				}
			}
		}
	}

	public void hideEasyStego(int[] words) {
		Pixel[][] pixels = this.getPixels2D();
		for(int i = 0; i < words.length;) {
		for (int row = 0; row < pixels.length; row++) {
			for (int col = 0; col < pixels[0].length; col++) {
				if(pixels[row][col].getBlue() < 100 && pixels[row][col].getGreen() < 100)  {
					pixels[row][col].setRed(words[i]); 
					i++; 
				}
			}
		}
		}
	}

} // this } is the end of class Picture, put all new methods before this
