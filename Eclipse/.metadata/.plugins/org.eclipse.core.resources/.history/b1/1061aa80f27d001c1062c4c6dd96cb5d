
public class DrewBookAnalytics extends BookAnalytics {

	private String master, noPunct;

	public DrewBookAnalytics(String aTextFile, String outputFile) {
		super(aTextFile, outputFile);
		master = convert();
		noPunct = reomvePunc(); 
	}

	private String reomvePunc() {
		// TODO Auto-generated method stub
		return null;
	}

	private String convert() {
		String allText = "";
		while (scan.hasNextLine()) {
			String temp = scan.nextLine();
			allText += temp + "\n";
		}
		return allText; 
	}

	@Override
	public String mostFrequentWord() {
		Styring message = master;
		 message = message.toLowerCase(); 
		  String[] punc = {".", ",", "?", "!", "\"", "’", "\\", "/"};
		  for(String per : punc){
		    message = message.replace(per, "");
		  }
		 
		  String[] most = message.split(" "); 
		  String max = "";
		  int count = 0; 
		  int maxCount = 0; 
		  for(String word : most){
		    count = 0; 
		    for(String check : most) {
		      if(check.equals(word)){
		        count++; 
		      }
		    }
		    if(count > maxCount){
		      maxCount = count;
		      max = word; 
		    }
		  }
		  String dad = "";
		  for(String pat : punc){
		     dad += "" + pat; 
		  }
		  
		  
		  return max;
	}

	@Override
	public String mostFrequentWordWithCapitalFirstLetter() {

		return null;
	}

	@Override
	public char mostFrequentLetter() {

		return 0;
	}

	@Override
	public int wordCount() {

		return 0;
	}

	@Override
	public int characterCount() {

		return 0;
	}

	@Override
	public int vowelCount() {

		return 0;
	}

	@Override
	public int consonantCount() {

		return 0;
	}

	@Override
	public double averageWordLength() {

		return 0;
	}

	@Override
	public int sentenceCount() {

		return 0;
	}

	@Override
	public double averageWordsPerSentance() {

		return 0;
	}

	@Override
	public int numberOfDifferentWords() {

		return 0;
	}

	@Override
	public String alphabetizeAllByChar() {

		return null;
	}

	@Override
	public String alphabetizeAllByWord() {

		return null;
	}

	@Override
	public String replaceWordAndPreserveCase(String aLine, String wordOne, String wordTwo) {

		return null;
	}

	@Override
	public String toString() {

		return null;
	}

	@Override
	public void replaceWordsAndWriteToFile(String[] wordsToBeReplaced, String[] wordsToReplaceWith) {

	}

	public void printFile() {
		String allText = "";
		while (scan.hasNextLine()) {
			String temp = scan.nextLine();
			allText += temp + "\n";
			System.out.println(nukeLetterA(temp));
		}
		System.out.println(allText);
		write.write(allText); // use a textWriter to output a string to a new file\
		write.flush(); //clears the writer for the next use
	}

	private String nukeLetterA(String nextLine) {
//		String anOutput = "";
//		for (int i = 0; i < nextLine.length(); i++) {
//			if (nextLine.charAt(i) == 'a') {
//				anOutput += "*";
//			} else {
//				anOutput += nextLine.charAt(i);
//			}
//		}
//		return anOutput;
		return nextLine.replace("a", "*");
	}

}
