import java.awt.*;
import java.util.*;

public class SandLab {
	public static void main(String[] args) {
		SandLab lab = new SandLab(120, 80);
		lab.run();
	}

	// add constants for particle types here
	public static final int EMPTY = 0;
	public static final int METAL = 1;
	public static final int SAND = 2;
	public static final int WATER = 3;

	// do not add any more fields
	private int[][] grid;
	private SandDisplay display;
	private HashMap<Integer, Color> colors;
	Random rand;

	public SandLab(int numRows, int numCols) {
		String[] names;
		names = new String[4];
		names[EMPTY] = "Empty";
		names[METAL] = "Metal";
		names[SAND] = "Sand";
		names[WATER] = "Water";
		display = new SandDisplay("Falling Sand", numRows, numCols, names);
		grid = new int[numRows][numCols];
		colors = new HashMap<>();
		colors.put(1, Color.GRAY);
		colors.put(2, new Color(245, 238, 91));
		colors.put(3, new Color(58, 16, 189));
		rand = new Random();
	}

	// called when the user clicks on a location using the given tool
	private void locationClicked(int row, int col, int tool) {
		grid[row][col] = tool;

	}

	// copies each element of grid into the display
	public void updateDisplay() {
		for (int i = 0; i < grid.length; i++) {
			for (int j = 0; j < grid[i].length; j++) {
				if (grid[i][j] > 0) {
					for (int q = 1; q <= colors.size(); q++) {
						if (grid[i][j] == q) {
							display.setColor(i, j, colors.get(q));
						}
					}
				} else {
					display.setColor(i, j, Color.BLACK);
				}
			}
		}
	}

	public void step() {
		int wid = rand.nextInt(grid.length);
		int hei = rand.nextInt(grid[0].length);
		if (grid[wid][hei] == 2) {
			sandMove(wid, hei);
		} else if (grid[wid][hei] == 3) {
			waterMove(wid, hei);
		}
	}

	private void waterMove(int up, int right) {
		if (isValid("b", up, right) && grid[up + 1][right] == 0) {
			grid[up + 1][right] = grid[up][right];
			grid[up][right] = 0;
		} else if (isValid("b", up, right) && grid[up + 1][right] != 0) {
			if (isValid("l", up, right) && isValid("r", up, right)) {
				if (grid[up][right - 1] == 0 && grid[up][right + 1] == 0) {
					if (rand.nextInt(2) == 1) {
						grid[up][right + 1] = grid[up][right];
						grid[up][right] = 0;
					} else {
						grid[up][right - 1] = grid[up][right];
						grid[up][right] = 0;
					}
				}

				else if (grid[up][right + 1] != 0 && grid[up][right - 1] == 0) {
					grid[up][right - 1] = grid[up][right];
					grid[up][right] = 0;
				} else if (grid[up][right + 1] == 0 && grid[up][right - 1] != 0) {
					grid[up][right + 1] = grid[up][right];
					grid[up][right] = 0;
				}
			}
		} else if (isValid("l", up, right) && !(isValid("r", up, right))) {
			grid[up][right - 1] = grid[up][right];
			grid[up][right] = 0;
		} else if (!isValid("l", up, right) && (isValid("r", up, right))) {
			grid[up][right + 1] = grid[up][right];
			grid[up][right] = 0;
		}

	}

	// do not modify
	public void run() {
		while (true) {
			for (int i = 0; i < display.getSpeed(); i++)
				step();
			updateDisplay();
			display.repaint();
			display.pause(1); // wait for redrawing and for mouse
			int[] mouseLoc = display.getMouseLocation();
			if (mouseLoc != null) // test if mouse clicked
				locationClicked(mouseLoc[0], mouseLoc[1], display.getTool());
		}
	}

	private void sandMove(int up, int right) {
		int temp = 0; 
		if (isValid("b", up, right)) {
			if(grid[up + 1][right] == 0) {
			temp = grid[up + 1][right];
			grid[up + 1][right] = grid[up][right];
			grid[up][right] = temp;
			}
//			else if(grid[up+1][right] == 3) {
//				temp = grid[up + 1][right]; 
//				grid[up+1][right] = grid[up][right];
//				grid[up][right] = temp; 
//				
//			}
		} else if (isValid("b", up, right) && grid[up + 1][right] != 0) {
			if (isValid("bl", up, right) && isValid("br", up, right)) {
				if (grid[up + 1][right - 1] == 0 && grid[up + 1][right + 1] == 0) {
					if (rand.nextInt(2) == 1) {
						grid[up + 1][right + 1] = grid[up][right];
						grid[up][right] = 0;
					} else {
						grid[up - 1][right - 1] = grid[up][right];
						grid[up][right] = 0;
					}
				}

				else if (grid[up + 1][right + 1] != 0 && grid[up + 1][right - 1] == 0) {
					grid[up + 1][right - 1] = grid[up][right];
					grid[up][right] = 0;
				} else if (grid[up + 1][right + 1] == 0 && grid[up + 1][right - 1] != 0) {
					grid[up + 1][right + 1] = grid[up][right];
					grid[up][right] = 0;
				}
			}
		}
		if (isValid("bl", up, right) && !(isValid("br", up, right))) {
			if (grid[up + 1][right - 1] == 0) {
				grid[up + 1][right - 1] = grid[up][right];
				grid[up][right] = 0;
			}
		}
		if (!isValid("bl", up, right) && (isValid("br", up, right))) {
			if (grid[up + 1][right + 1] == 0) {
				grid[up + 1][right + 1] = grid[up][right];
				grid[up][right] = 0;
			}
		}

	}

	private boolean isValid(String loc, int up, int right) {
		if (loc.equals("tl") && up - 1 >= 0 && right - 1 >= 0) {
			return true;
		} else if (loc.equals("t") && up - 1 >= 0) {
			return true;
		} else if (loc.equals("tr") && up - 1 >= 0 && right + 1 < grid[up].length) {
			return true;
		} else if (loc.equals("l") && right - 1 >= 0) {
			return true;
		} else if (loc.equals("r") && right + 1 < grid[up].length) {
			return true;
		} else if (loc.equals("bl") && up + 1 < grid.length && right - 1 >= 0) {
			return true;
		} else if (loc.equals("b") && up + 1 < grid.length) {
			return true;
		} else if (loc.equals("br") && up + 1 < grid.length && right + 1 < grid[up].length) {
			return true;
		}
		return false;
	}

}
